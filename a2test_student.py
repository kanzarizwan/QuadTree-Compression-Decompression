"""
Assignment 2: Quadtree Compression

=== CSC148 Winter 2021 ===
Department of Mathematical and Computational Sciences,
University of Toronto Mississauga

=== Module Description ===
This module contains the test suite
"""

import pytest
from a2tree import QuadTreeNode, QuadTreeNodeEmpty, \
    QuadTreeNodeLeaf, QuadTreeNodeInternal, QuadTree

"""
Test cases
"""


def test_split_quadrants_1():
    """
    Test for odd width and height of pixel matrix.
    """

    result = QuadTree._split_quadrants(
        [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])
    assert result == [[[1], [4]], [[2, 3], [5, 6]],
                      [[7], [10], [13]], [[8, 9], [11, 12], [14, 15]]]


def test_split_quadrants_2():
    """
    Test for pixel matrix width == 0 or height == 0.
    """
    #  Height == 0
    result = QuadTree._split_quadrants([[2, 3]])
    assert result == [[], [], [[2]], [[3]]]

    #  Width == 0
    result = QuadTree._split_quadrants([[4], [7]])
    assert result == [[[]], [[4]], [[]], [[7]]]


def test_split_quadrants_3():
    """
    For odd widths and heights, the left half and the bottom half
    must be the smaller one of the two halves.
    """
    pixels = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    result = QuadTree._split_quadrants(pixels)

    assert len(result[0][0]) < len(result[1][0])
    assert len(result[0]) < len(result[2])


def test_restore_from_preorder_1():
    """
    Returns the same tree that was generated by the pixel matrix.
    """

    pixels = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]

    tree = QuadTree(0)
    tree.build_quad_tree(pixels)
    preorder_lst = tree.preorder()

    res = QuadTree.restore_from_preorder(preorder_lst.split(","), 4, 3)

    assert res.root.children[0].children[3].value == \
           tree.root.children[0].children[3].value


def test_restore_from_preorder_2():
    """
    Returns value equal to the number of nodes in the tree.
    """
    pixels = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    tree = QuadTree(0)
    tree.build_quad_tree(pixels)
    result = tree.root.restore_from_preorder(tree.preorder().split(","), 0)
    leaves = 16
    roots = 5
    assert result == leaves + roots


def test_restore_from_preorder_3():
    """
    Test case for non zero value of start index.
    """
    root = QuadTreeNodeInternal()
    preorder_lst = ',,E,1,E,4,,2,3,5,6,,E,7,E,,E,10,E,13,,8,9,,E,11,E,14,,E,' \
                   '12,E,15'.split(",")
    root.restore_from_preorder(preorder_lst, 11)
    assert root.children[3].children[3].value == 13


def test_split_matrix_4():
    """
    1 x 1 pixel matrix
    """
    pixels = [[4]]
    result = QuadTree._split_quadrants(pixels)
    assert result == [[], [], [[]], [[4]]]


def test_convert_to_pixels():
    """
    Test for return matrix is same as convert_to_pixels when loss level is 0.
    """
    tree = QuadTree(0)
    pixels = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]
    result = tree._split_quadrants(pixels)
    tree.build_quad_tree(pixels)
    assert pixels == tree.convert_to_pixels()


if __name__ == '__main__':
    pytest.main(['a2test_student.py'])
